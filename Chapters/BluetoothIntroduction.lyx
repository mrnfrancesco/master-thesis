#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass classicthesis
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begingroup
\end_layout

\begin_layout Plain Layout


\backslash
let
\backslash
clearpage
\backslash
relax
\end_layout

\begin_layout Plain Layout


\backslash
let
\backslash
cleardoublepage
\backslash
relax
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align right

\shape slanted
TODO
\begin_inset Newline newline
\end_inset


\shape default
 
\begin_inset VSpace medskip
\end_inset

 — 
\series bold
TODO
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Chapter
Introduzione al Bluetooth
\begin_inset script superscript

\begin_layout Plain Layout
®
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "ch:bluetooth-introduction"

\end_inset


\end_layout

\begin_layout Standard
Introdotto per la prima volta nel 1998, il Bluetooth è tutt'oggi il protocollo
 più diffuso per le comunicazioni senza fili a corto raggio.
 Secondo stime recenti
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "https://www.bluetooth.com/markets"
target "https://www.bluetooth.com/markets"

\end_inset


\end_layout

\end_inset

 è presente in più di 4 miliardi di dispositivi nei settori automotive,
 domotica, dispositivi medici, smartphone, smart TV, computer, periferiche,
 stampanti e wearable per nominarne solo alcuni.
 Dopo l'introduzione del 
\begin_inset Flex CT - acronym
status open

\begin_layout Plain Layout

BLE
\end_layout

\end_inset

 che permette l'uso del protocollo con un basso consumo energetico e di
 banda, il numero di dispositivi ad utilizzare il Bluetooth continua a diffonder
si nel crescente mercato dell'
\begin_inset Flex CT - acronym
status open

\begin_layout Plain Layout

IoT
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Con il diffondersi della tecnologia e dei dispositivi che la utilizzano
 sono andate ad aumentare anche le interconnesioni tra questi, come si può
 vedere in maniera semplificata in Figura 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:bluetooth-ecosystem"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
center
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[auto, thick]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
let
\backslash
ORIincludegraphics
\backslash
includegraphics
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
includegraphics}[2][]{
\backslash
ORIincludegraphics[width=32px, #1]{#2}}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{BLNode}=[draw=gray!50,circle,node distance=3cm,inner sep=-4pt]
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{BLBiggerNode}=[draw=gray!50,circle,node distance=4cm,inner sep=-7pt]
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{BLEdge}=[color=gray!50]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Nodes creation and positioning
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
node[BLBiggerNode](phone_tablet_laptop){
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics[width=48px]{gfx/icons/bt_ecosystem/phone_tablet_laptop.png}};
\end_layout

\begin_layout Plain Layout


\backslash
node[BLNode, above of=phone_tablet_laptop](connected_devices){
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics{gfx/icons/bt_ecosystem/connected_devices.png}};
\end_layout

\begin_layout Plain Layout


\backslash
node[BLNode, above right  of=phone_tablet_laptop](automotive){
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics{gfx/icons/bt_ecosystem/automotive.png}};
\end_layout

\begin_layout Plain Layout


\backslash
node[BLNode, right of=phone_tablet_laptop](smart_industry){
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics{gfx/icons/bt_ecosystem/smart_industry.png}};
\end_layout

\begin_layout Plain Layout


\backslash
node[BLBiggerNode, below right of=phone_tablet_laptop](smart_city){
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics[width=48px]{gfx/icons/bt_ecosystem/smart_city.png}};
\end_layout

\begin_layout Plain Layout


\backslash
node[BLNode, below left of=phone_tablet_laptop](smart_buildings){
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics{gfx/icons/bt_ecosystem/smart_buildings.png}};
\end_layout

\begin_layout Plain Layout


\backslash
node[BLNode, left of=phone_tablet_laptop](smart_home){
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics{gfx/icons/bt_ecosystem/smart_home.png}};
\end_layout

\begin_layout Plain Layout


\backslash
node[BLNode, above left of=phone_tablet_laptop](audio_and_entertainment){
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics{gfx/icons/bt_ecosystem/audio_and_entertainment.png}};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node[BLNode, above right of=smart_city](smart_mobility){
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics{gfx/icons/bt_ecosystem/smart_mobility.png}};
\end_layout

\begin_layout Plain Layout


\backslash
node[BLNode, right of=smart_city](smart_parking){
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics{gfx/icons/bt_ecosystem/smart_parking.png}};
\end_layout

\begin_layout Plain Layout


\backslash
node[BLNode, below right of=smart_city](smart_tourism){
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics{gfx/icons/bt_ecosystem/smart_tourism.png}};
\end_layout

\begin_layout Plain Layout


\backslash
node[BLNode, below of=smart_city](smart_utilities){
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics{gfx/icons/bt_ecosystem/smart_utilities.png}};
\end_layout

\begin_layout Plain Layout


\backslash
node[BLNode, below left of=smart_city](smart_waste_management){
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics{gfx/icons/bt_ecosystem/smart_waste_management.png}};
\end_layout

\begin_layout Plain Layout


\backslash
node[BLNode, below of=phone_tablet_laptop, node distance=3.5cm](smart_emergency_s
ervices){
\end_layout

\begin_layout Plain Layout

	
\backslash
includegraphics{gfx/icons/bt_ecosystem/smart_emergency_services.png}};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Create edges through nodes
\end_layout

\begin_layout Plain Layout

%
\end_layout

\begin_layout Plain Layout


\backslash
foreach 
\backslash
dest in {
\end_layout

\begin_layout Plain Layout

	smart_mobility, smart_parking, smart_tourism, smart_utilities,
\end_layout

\begin_layout Plain Layout

	smart_waste_management, smart_emergency_services}
\end_layout

\begin_layout Plain Layout


\backslash
path[BLEdge] (smart_city) edge (
\backslash
dest);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
foreach 
\backslash
dest in {
\end_layout

\begin_layout Plain Layout

	connected_devices, automotive, smart_industry, smart_city,
\end_layout

\begin_layout Plain Layout

	smart_buildings, smart_home, audio_and_entertainment}
\end_layout

\begin_layout Plain Layout


\backslash
path[BLEdge] (phone_tablet_laptop) edge (
\backslash
dest);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
foreach 
\backslash
source/
\backslash
dest in {
\end_layout

\begin_layout Plain Layout

	connected_devices/automotive,
\end_layout

\begin_layout Plain Layout

	automotive/smart_industry,
\end_layout

\begin_layout Plain Layout

	smart_industry/smart_city,
\end_layout

\begin_layout Plain Layout

	smart_city/smart_buildings,
\end_layout

\begin_layout Plain Layout

	smart_buildings/smart_home,
\end_layout

\begin_layout Plain Layout

	smart_home/audio_and_entertainment,
\end_layout

\begin_layout Plain Layout

	audio_and_entertainment/connected_devices}
\end_layout

\begin_layout Plain Layout


\backslash
path[BLEdge] (
\backslash
source) edge (
\backslash
dest);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
foreach 
\backslash
source/
\backslash
dest in {
\end_layout

\begin_layout Plain Layout

	smart_mobility/smart_parking,
\end_layout

\begin_layout Plain Layout

	smart_parking/smart_tourism,
\end_layout

\begin_layout Plain Layout

	smart_tourism/smart_utilities,
\end_layout

\begin_layout Plain Layout

	smart_utilities/smart_waste_management}
\end_layout

\begin_layout Plain Layout


\backslash
path[BLEdge] (
\backslash
source) edge (
\backslash
dest);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\size footnotesize
\begin_inset CommandInset label
LatexCommand label
name "fig:bluetooth-ecosystem"

\end_inset

Ecosistema dei dispositivi Bluetooth e loro interconnessioni
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il Bluetooth come standard viene gestito e manutenuto dal 
\begin_inset Flex CT - acronym
status open

\begin_layout Plain Layout

SIG
\end_layout

\end_inset

 che include membri da alcune delle maggiori società del settore come Microsoft,
 Intel, Apple, IBM ed altre.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Nonostante quanto appena detto le recenti scoperte del gruppo Armis
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Startup che si occupa di sviluppare soluzioni per controllare e rilevare
 attività e minacce su dispositivi IoT e reti
\end_layout

\end_inset

 relativamente a BlueBorne mostrano che l'implementazione da parte dei vendor
 dello stack Bluetooth presenta delle importanti falle di sicurezza che
 affliggono quasi tutti i principali sistemi operativi e i dispositivi che
 li utilizzano.
 Il motivo di questo è da attribuire probabilmente alle scelte progettuali
 fatte nella creazione delle specifiche tecniche che hanno reso il Bluetooth
 estremamente complesso.
 Per meglio capire questo punto basti pensare che le specifiche del WiFi
 (802.11) contano in totale circa 450 pagine, mentre le specifiche del Bluetooth
 superano le 2800.
\end_layout

\begin_layout Standard
Questa complessità ha tenuto i ricercatori lontani dal revisionare e testare
 le diverse implementazioni dello standard.
 Il risultato di tutto questo è l'esistenza di un gran numero di vulnerabilità,
 tra cui quelle esposte nel capitolo 
\begin_inset CommandInset ref
LatexCommand nameref
reference "ch:blueborne"

\end_inset

 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "ch:blueborne"

\end_inset

.
\end_layout

\begin_layout Standard
Un esempio della complessità dello standard è il meccanismo di frammentazione,
 una tecnica comune in molti protocolli e un punto debole in ogni implementazion
e.
 Le specifiche del Bluetooth presentano principalmente tre differenti livelli
 di frammentazione (
\emph on
L2CAP
\emph default
, 
\emph on
HCI
\emph default
 e 
\emph on
Link Controller
\emph default
) implementati nello stack (Fig.
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:bluetooth-fragmentation"

\end_inset

), più altri livelli in diversi servizi specifici.
\end_layout

\begin_layout Standard
La complessità aumenta ancora in alcuni servizi come SDP in cui si aggiunge
 un ulteriore livello di frammentazione.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/mrnfrancesco/git/master-thesis/gfx/bluetooth-segmentation-and-fragmentation.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:bluetooth-fragmentation"

\end_inset


\size footnotesize
Esempio dei processi di segmentazione e frammentazione
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La letteratura mostra che proprio questa complessità è stata oggetto di
 studio in ricerche passate che miravano a trovare problemi nelle specifiche
 stesse, ad esempio mostrando delle debolezze nel meccanismo di scambio
 delle chiavi di cifratura.
 Nel momento in cui nello standard è stato introdotto il 
\begin_inset Flex CT - acronym
status open

\begin_layout Plain Layout

SSP
\end_layout

\end_inset

, funzionalità che risolveva molti dei problemi noti nel meccanismo di 
\emph on
pairing
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Processo di inizializzazione del collegamento tra due dispositivi al fine
 di permettere la comunicazione tra questi
\end_layout

\end_inset

, l'interesse della comunità di ricercatori in sicurezza si è allontanato
 dal Bluetooth per rivolgersi altrove.
 Altre ricerche sono state fatte dopo l'introduzione del BLE, ma nessuna
 di queste prevedeva un'analisi approfondita delle diverse implementazioni
 dello stack Bluetooth.
\end_layout

\begin_layout Standard
Lo studio dell'Armis e la scoperta di BlueBorne rappresentano la punta dell'iceb
erg dei problemi che le implementazioni dello stack Bluetooth possono presentare
 e mostrano quanto importante sia che i ricercatori rivolgano l'interesse
 verso questa tecnologia.
\end_layout

\begin_layout Section
Analisi della superficie d'attacco Bluetooth
\end_layout

\begin_layout Standard
In un certo senso lo stack Bluetooth è l'equivalente dello stack TCP/IP,
 ma per comunicazioni Bluetooth; infatti a differenza di altri protocolli
 di comunicazione come Ethernet e WiFi, il Bluetooth non fa affidamento
 sullo stack TCP/IP per i protocolli applicativi di alto livello.
 Piuttosto sono stati definiti una gran varietà di protocolli e applicazioni
 a partire dal livello fisico fino al livello applicativo che nel complesso
 rappresentano lo stack Bluetooth (Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:bluetooth-stack"

\end_inset

).
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/mrnfrancesco/git/master-thesis/gfx/bluetooth-stack.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:bluetooth-stack"

\end_inset


\size footnotesize
Architettura dello stack Bluetooth
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
I livelli più bassi dello stack (livello fisico e di collegamento) sono
 implementati nei chip Bluetooth.
 Questi chip comunicano con un 
\emph on
host
\emph default
, che è il sistema operativo del dispositivo, tramite il protocollo 
\begin_inset Flex CT - acronym
status open

\begin_layout Plain Layout

HCI
\end_layout

\end_inset

.
 Tutti i protocolli al di sopra di questo livello (L2CAP, AMP, SMP, SDP
 e RFCOMM) sono invece implementati direttamente dall'host.
 A differenza dei driver degli adattatori Bluetooth che implementano diverse
 versioni dello stack per ogni hardware, i moderni sistemi operativi hanno
 una sola implementazione dello stack.
 Questo significa che ogni vulnerabilità che viene trovata in uno stack
 automaticamente affligge tutti i dispositivi su cui gira lo specifico sistema
 operativo che implementa quello stack.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/mrnfrancesco/git/master-thesis/gfx/bluetooth-stack-blocks-and-vulnerabilities.png
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:bluetooth-stack-blocks-and-vulnerabilities"

\end_inset


\size footnotesize
Blocchi fondamentali dello stack Bluetooth e vulnerabilità scoperte con
 BlueBorne
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:bluetooth-stack-blocks-and-vulnerabilities"

\end_inset

 vengono mostrati i blocchi fondamentali dello stack Bluetooth evidenziando
 quelli dove risiedono le vulnerabilità di BlueBorne per i diversi sistemi
 operativi.
\end_layout

\begin_layout Section
Service Discovery Protocol
\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand nocite
key "blueborne_white_paper"

\end_inset


\end_layout

\begin_layout Standard
Il 
\begin_inset Flex CT - acronym
status collapsed

\begin_layout Plain Layout

SDP
\end_layout

\end_inset

 è uno degli strati che fanno parte del core delle specifiche Bluetooth,
 quindi è presente in tutte le sue implementazioni.
 Il suo scopo è quello di fornire alle applicazioni client un meccanismo
 per scoprire l'esistenza di servizi forniti e relativi attributi dal server
 SDP interrogato.
 Gli attributi di un servizio includono il tipo e la classe di servizio
 offerti e il meccanismo o le informazioni di protocollo necessarie per
 utilizzare il servizio.
\end_layout

\begin_layout Standard
L'intera comunicazione avviene tra il client SDP e il server SDP.
 Quest'ultimo mantiene una lista di 
\emph on
service record
\emph default
 che descrivono le caratteristiche dei servizi presenti sull'host su cui
 gira il server.
 Un client può recuperare queste informazioni richiedendo i 
\emph on
service record
\emph default
 al server tramite una richiesta SDP.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Se il client, o un'applicazione associata con esso, decide di utilizzare
 un servizio deve aprire una connessione separata al provider del servizio
 utilizzando le informazioni presenti nel 
\emph on
service record
\emph default
.
 Questo perché SDP fornisce un meccanismo atto solo a scoprire i servizi,
 ma non ad utilizzarli.
\end_layout

\begin_layout Subsection
Service Record e Service Attribute
\end_layout

\begin_layout Standard
Un servizio è un'entità che può fornire informazioni, svolgere azioni o
 gestire risorse.
 Un servizio può essere implementato in software, hardware, o una combinazione
 dei due.
\end_layout

\begin_layout Standard
Tutte le informazioni che riguardano un servizio mantenuto da un server
 SDP sono contenute in un unico 
\emph on
service record 
\emph default
che non è altro che una lista di attributi relativi al servizio, come mostrato
 in Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sdp-service-record"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{bytefield}[%
\end_layout

\begin_layout Plain Layout

	boxformatting={
\backslash
centering
\backslash
itshape},
\end_layout

\begin_layout Plain Layout

	bitwidth=1em]{10}
\end_layout

\begin_layout Plain Layout

	
\backslash
wordbox{1}{
\backslash
scriptsize Service Attribute~1} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
wordbox{1}{
\backslash
scriptsize Service Attribute~2} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
wordbox{1}{
\backslash
scriptsize Service Attribute~3} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
wordbox[]{1}{$
\backslash
vdots$} 
\backslash

\backslash
[1ex]
\end_layout

\begin_layout Plain Layout

	
\backslash
wordbox{1}{
\backslash
scriptsize Service Attribute~N} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{bytefield}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:sdp-service-record"

\end_inset


\size footnotesize
Service Record
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ogni attributo descrive una singola caratteristica di un servizio.
 Alcuni esempi di attributo sono quelli che descrivono l'ID del servizio,
 il nome, la descrizione, l'URL dell'icona, ecc.
\end_layout

\begin_layout Standard
Un attributo consiste di due componenti: un ID e un valore (vedi Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sdp-service-attribute-general"

\end_inset

).
 L'ID è un intero senza segno a 16 bit che serve a distinguere ogni attributo
 di un servizio dagli attributi di altri servizi.
 Il valore è un campo a lunghezza variabile la cui semantica è definita
 dal valore dell'ID.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{bytefield}[%
\end_layout

\begin_layout Plain Layout

	boxformatting={
\backslash
centering
\backslash
itshape},
\end_layout

\begin_layout Plain Layout

	bitwidth=1em]{16}
\end_layout

\begin_layout Plain Layout

	
\backslash
bitheader{0,8,15} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
wordbox{1}{
\backslash
scriptsize Attribute ID} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
wordbox{1}{
\backslash
scriptsize Attribute Value 
\backslash

\backslash
 
\backslash
tiny (Lunghezza variabile)} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{bytefield}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:sdp-service-attribute-general"

\end_inset


\size footnotesize
Service Attribute
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
I valori degli attributi possono essere arbitrariamente complesse e contenere
 informazioni di vario tipo.
 SDP definisce un semplice meccanismo per descrivere i dati contenuti in
 un attributo: il 
\emph on
Data Element
\emph default
.
\end_layout

\begin_layout Subsection
Data Element
\end_layout

\begin_layout Standard
Un 
\emph on
Data Element
\emph default
 (Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sdp-service-attribute-data-element"

\end_inset

) consiste di due campi: un campo header e un campo dati.
 A sua volta il campo header è composto di due parti che indicano tipo (
\begin_inset Formula $5$
\end_inset

 bit) e dimensione (
\begin_inset Formula $3$
\end_inset

 bit) del campo dati.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{bytefield}[%
\end_layout

\begin_layout Plain Layout

	boxformatting={
\backslash
centering
\backslash
itshape},
\end_layout

\begin_layout Plain Layout

	bitwidth=1.5em]{20}
\end_layout

\begin_layout Plain Layout

	
\backslash
bitheader{0,4,5,7} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
bitbox{5}{
\backslash
scriptsize Element Type} &
\end_layout

\begin_layout Plain Layout

	
\backslash
bitbox{3}{
\backslash
scriptsize Element Size} &
\end_layout

\begin_layout Plain Layout

	
\backslash
bitbox{12}{
\backslash
scriptsize Data 
\backslash

\backslash
 
\backslash
tiny (Variable Length)} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{bytefield}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:sdp-service-attribute-data-element"

\end_inset


\size footnotesize
Data Element
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Alcuni valori di tipo che saranno utili per la trattazione successiva sono
 riportati in Tabella 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:sdp-data-element-type"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="middle">
<column alignment="center" valignment="middle">
<column alignment="center" valignment="middle" width="55col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tipo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dimensioni valide
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Descrizione
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1,2,4$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex CT - acronym
status collapsed

\begin_layout Plain Layout

UUID
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $6$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $5,6,7$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sequenza, un 
\emph on
Data Element
\emph default
 in cui il campo dati è una sequenza di altri 
\emph on
Data Element
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:sdp-data-element-type"

\end_inset

Valori del campo tipo di un 
\emph on
Data Element
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il campo dimensione nell'header di un 
\emph on
Data Element
\emph default
 è un indice di 
\begin_inset Formula $3$
\end_inset

 bit seguito da 
\begin_inset Formula $0,8,16\text{ o }32$
\end_inset

 bit a seconda del valore, come descritto in Tabella 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:sdp-data-element-size"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="middle">
<column alignment="center" valignment="middle">
<column alignment="center" valignment="middle" width="55col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Indice
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bit addizionali
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dimensione del campo Dati
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1$
\end_inset

 byte tranne nel caso in cui il tipo è 
\emph on
nil
\emph default
 in cui la dimensione è 
\begin_inset Formula $0$
\end_inset

 byte
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2$
\end_inset

 byte
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $4$
\end_inset

 byte
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $8$
\end_inset

 byte
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $4$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $0$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $16$
\end_inset

 byte
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $5$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $8$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
La dimensione dei dati è contenuto nel successivo byte, interpretato come
 intero senza segno
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $6$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $16$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
La dimensione dei dati è contenuta nei successivi 
\begin_inset Formula $16$
\end_inset

 bit, interpretati come intero senza segno
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $7$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $32$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
La dimensione dei dati è contenuta nei successivi 
\begin_inset Formula $32$
\end_inset

 bit, interpretati come intero senza segno
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:sdp-data-element-size"

\end_inset

Valori del campo dimensione di un 
\emph on
Data Element
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Descrizione del protocollo
\end_layout

\begin_layout Standard
SDP utilizza un modello richiesta/risposta tra client e server in cui ogni
 transazione consiste di una richiesta 
\begin_inset Flex CT - acronym
status collapsed

\begin_layout Plain Layout

PDU
\end_layout

\end_inset

 e una risposta PDU il cui formato è specificato in Figura 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:sdp-pdu-format"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{bytefield}[%
\end_layout

\begin_layout Plain Layout

	boxformatting={
\backslash
centering
\backslash
itshape},
\end_layout

\begin_layout Plain Layout

	bitwidth=0.55em]{40}
\end_layout

\begin_layout Plain Layout

	
\backslash
bitheader{0,7,8,23,24,39} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
begin{rightwordgroup}{PDU Header}
\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{8}{
\backslash
scriptsize PDU ID} &
\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{16}{
\backslash
scriptsize Transaction ID} &
\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{16}{
\backslash
scriptsize Parameter Length}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{rightwordgroup} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
bitheader{0,31} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
begin{rightwordgroup}{Parametri 
\backslash

\backslash
 
\backslash
tiny (
\backslash
(4
\backslash
) x Parameter Length Byte)}
\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{32}{
\backslash
scriptsize Parametro~1} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{32}{
\backslash
scriptsize Parametro~2} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox[]{32}{$
\backslash
vdots$} 
\backslash

\backslash
 [1ex]
\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{32}{
\backslash
scriptsize Parametro~N}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{rightwordgroup} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{bytefield}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:sdp-pdu-format"

\end_inset


\size footnotesize
Formato del pacchetto PDU
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Alcune richieste SDP potrebbero richiedere risposte che sono più grandi
 della dimensione massima di una risposta PDU.
 In questo caso il server SDP genera una risposta parziale a cui viene accodato
 un parametro chiamato 
\emph on
Continuation State
\emph default
 utilizzando un meccanismo di frammentazione proprio del livello SDP chiamato
 
\emph on
SDP Continuation
\emph default
.
\end_layout

\begin_layout Standard
Il parametro 
\emph on
Continuation State
\emph default
 è un campo a lunghezza variabile la cui dimensione è specificata nel primo
 byte (vedi Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sdp-continuation-state-format"

\end_inset

)
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{bytefield}[%
\end_layout

\begin_layout Plain Layout

	boxformatting={
\backslash
centering
\backslash
itshape},
\end_layout

\begin_layout Plain Layout

	bitwidth=1em]{24}
\end_layout

\begin_layout Plain Layout

	
\backslash
bitbox{8}{
\backslash
small InfoLength 
\backslash

\backslash
 
\backslash
tiny (
\backslash
(1
\backslash
) Byte)} &
\end_layout

\begin_layout Plain Layout

	
\backslash
bitbox{16}{
\backslash
small Continuation Information} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{bytefield}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:sdp-continuation-state-format"

\end_inset


\size footnotesize
Formato 
\emph on
Continuation State
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il formato dell'informazione di continuazione non è standardizzato tra i
 server SDP.
 Ogni parametro del 
\emph on
Continuation State
\emph default
 ha significato solo per il server SDP che lo ha generato.
\end_layout

\begin_layout Standard
Dopo che un client riceve una risposta parziale contenente il 
\emph on
Continuation State
\emph default
 può re-inviare la richiesta originale (con un nuovo 
\emph on
Transaction ID
\emph default
) includendo il 
\emph on
Continuation State 
\emph default
ricevuto indicando così di voler ricevere la restante parte della risposta.
\end_layout

\begin_layout Subsection
Ricerca di servizi
\end_layout

\begin_layout Standard
La richiesta SDP per la ricerca di un servizio da parte di un client permette
 di ottenere il 
\emph on
service record
\emph default
 di un servizio sulla base del valore di UUID.
 Un UUID è un valore a 
\begin_inset Formula $128$
\end_inset

 bit, ma per alleggerire il carico di lavoro durante il trasferimento dei
 valori di UUID, sono stati predisposti alcuni alias a 
\begin_inset Formula $16$
\end_inset

 o 
\begin_inset Formula $32$
\end_inset

 bit per i valori più comunemente utilizzati.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Il formato dei pacchetti di richiesta e risposta per la ricerca del servizio
 con UUID fittizio 
\begin_inset Formula $0xAABB$
\end_inset

 e 
\emph on
Continuation State
\emph default
 impostato sono illustrati in Figura 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:sdp-service-search-request-response-format"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
colorbitbox}[3]{%
\end_layout

\begin_layout Plain Layout

	
\backslash
rlap{
\backslash
bitbox{#2}{
\backslash
color{#1}
\backslash
rule{
\backslash
width}{
\backslash
height}}}%
\end_layout

\begin_layout Plain Layout

	
\backslash
bitbox{#2}{#3}}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout

SDP Service Search Request
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

~
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{bytefield}[%
\end_layout

\begin_layout Plain Layout

	boxformatting={
\backslash
centering
\backslash
itshape},
\end_layout

\begin_layout Plain Layout

	bitwidth=0.8em]{40}
\end_layout

\begin_layout Plain Layout

	
\backslash
bitheader{0,4,5,7,8,15,16,20,21,23,24,39} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
begin{rightwordgroup}{
\backslash
small PDU Header}
\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{8}{
\backslash
scriptsize PDU ID 
\backslash
(=0x03
\backslash
)} &
\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{16}{
\backslash
scriptsize Transaction ID} &
\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{16}{
\backslash
scriptsize Parameter Length}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{rightwordgroup} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
begin{rightwordgroup}{
\backslash
scriptsize Service Search Pattern}
\end_layout

\begin_layout Plain Layout

		
\backslash
colorbitbox{orange!15}{5}{
\backslash
scriptsize Element Type 
\backslash
(=6
\backslash
)} &
\end_layout

\begin_layout Plain Layout

		
\backslash
colorbitbox{orange!15}{3}{
\backslash
tiny Element Size 
\backslash
(=5
\backslash
)} &
\end_layout

\begin_layout Plain Layout

		
\backslash
colorbitbox{green!15}{8}{
\backslash
scriptsize Element Var Size 
\backslash
(=3
\backslash
)} &
\end_layout

\begin_layout Plain Layout

		
\backslash
colorbitbox{green!15}{5}{
\backslash
scriptsize Value Type 
\backslash
(=3
\backslash
)} &
\end_layout

\begin_layout Plain Layout

		
\backslash
colorbitbox{green!15}{3}{
\backslash
tiny Value Size 
\backslash
(=1
\backslash
)} &
\end_layout

\begin_layout Plain Layout

		
\backslash
colorbitbox{green!15}{16}{
\backslash
scriptsize Value 
\backslash
(=0xAABB
\backslash
)}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{rightwordgroup} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
bitbox{16}{
\backslash
scriptsize Maximum Service Record Count} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{8}{
\backslash
scriptsize Continuation State Length} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{16}{
\backslash
scriptsize Continuation State Value 
\backslash

\backslash
 
\backslash
tiny (Continuation State Length Byte)} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{bytefield}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
begin{bytefield}[bitwidth=0.85em, boxformatting={
\backslash
centering
\backslash
itshape}]{39}
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{1}{} & 
\backslash
bitbox[]{10}{
\backslash
small Data Element Header} & 
\backslash
bitbox[]{2}{} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{green!15}{1}{} & 
\backslash
bitbox[]{12}{
\backslash
small Data Element Data} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{1}{} & 
\backslash
bitbox[]{10}{
\backslash
small Continuation State} & 
\backslash
bitbox[]{2}{} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{bytefield}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

~
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout

SDP Service Search Response
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

~
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{bytefield}[%
\end_layout

\begin_layout Plain Layout

	boxformatting={
\backslash
centering
\backslash
itshape},
\end_layout

\begin_layout Plain Layout

	bitwidth=0.8em]{40}
\end_layout

\begin_layout Plain Layout

	
\backslash
bitheader{0,7,8,15,16,23,24,31,39} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
begin{rightwordgroup}{
\backslash
small PDU Header}
\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{8}{
\backslash
scriptsize PDU ID 
\backslash
(=0x03
\backslash
)} &
\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{16}{
\backslash
scriptsize Transaction ID 
\backslash

\backslash
 
\backslash
tiny (Transaction ID della richiesta)} &
\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{16}{
\backslash
scriptsize Parameter Length}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{rightwordgroup} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
bitbox{16}{
\backslash
scriptsize TotalServiceRecordCount 
\backslash
(=M 
\backslash
geq N
\backslash
)} &
\end_layout

\begin_layout Plain Layout

	
\backslash
bitbox{16}{
\backslash
scriptsize CurrentServiceRecordCount 
\backslash
(=N
\backslash
)} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
begin{rightwordgroup}{
\backslash
scriptsize ServiceRecordHandleList 
\backslash

\backslash
 
\backslash
tiny (
\backslash
(N
\backslash
) x 
\backslash
(4
\backslash
) Byte)}
\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{32}{
\backslash
scriptsize Service Attribute~1} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{32}{
\backslash
scriptsize Service Attribute~2} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox[]{32}{$
\backslash
vdots$} 
\backslash

\backslash
 [1ex]
\end_layout

\begin_layout Plain Layout

		
\backslash
bitbox{32}{
\backslash
scriptsize Service Attribute~N}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{rightwordgroup} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
begin{rightwordgroup}{
\backslash
scriptsize Continuation State}
\end_layout

\begin_layout Plain Layout

		
\backslash
colorbitbox{blue!15}{8}{
\backslash
scriptsize Continuation State Length} &
\end_layout

\begin_layout Plain Layout

		
\backslash
colorbitbox{blue!15}{16}{
\backslash
scriptsize Continuation State Value 
\backslash

\backslash
 
\backslash
tiny (Continuation State Length Byte)}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{rightwordgroup} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{bytefield}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:sdp-service-search-request-response-format"

\end_inset


\size footnotesize
Formato dei pacchetti di richiesta e risposta di una ricerca di servizi
 con 
\emph on
Continuation State
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Il workflow di una comunicazione SDP tra client e server per la ricerca
 di un servizio (illustrato in Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sdp-continuation-state-workflow"

\end_inset

) è il seguente:
\end_layout

\begin_layout Enumerate
Il client genera una richiesta SDP di ricerca per ottenere i 
\emph on
service record
\emph default
 del servizio specificato come primo parametro del PDU.
\end_layout

\begin_layout Enumerate
Alla ricezione della richiesta il server esamina i dati riguardanti i servizi
 disponibili e restituisce una risposta SDP contenente gli attributi dei
 
\emph on
service record 
\emph default
associati al servizio richiesto dal client.
\begin_inset Newline newline
\end_inset

Se la risposta eccede la 
\begin_inset Flex CT - acronym
status collapsed

\begin_layout Plain Layout

MTU
\end_layout

\end_inset

 della connessione L2CAP sottostante verrà inviato solo un frammento della
 risposta SDP seguita dalla struttura 
\begin_inset Flex CT - acronym
status collapsed

\begin_layout Plain Layout

CS
\end_layout

\end_inset

 che permette al client di richiedere il frammento successivo alla successiva
 richiesta.
\end_layout

\begin_layout Enumerate
Il client riceve la risposta SDP e controlla l'eventuale presenza del 
\emph on
Continuation State
\emph default
.
 Nel caso in cui fosse presente, per ricevere i restanti frammenti della
 risposta, il client invierà nuovamente 
\series bold
la stessa richiesta
\series default
 seguita dal 
\emph on
Continuation State
\emph default
 ricevuto nell'ultima risposta SDP.
\end_layout

\begin_layout Enumerate
Il server SDP invierà al client il frammento della risposta successivo secondo
 quanto indicato nel 
\emph on
Continuation State
\emph default
.
\end_layout

\begin_layout Enumerate
Si ripete il procedimento dal punto 
\begin_inset Formula $3$
\end_inset

 finché tutti i frammenti della risposta non vengono inviati.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{sequencediagram}
\end_layout

\begin_layout Plain Layout

	
\backslash
renewcommand
\backslash
unitfactor{0.75}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	
\backslash
newthread{client}{SDP Client}
\end_layout

\begin_layout Plain Layout

	
\backslash
newinst[6]{server}{SDP Server}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
begin{call}{client}{
\backslash
small ServiceSearchRequest(UUID)}{server}{
\backslash
small ServiceSearchResponse 
\backslash
((1/N)
\backslash
) + CS 
\backslash
((1)
\backslash
)}
\backslash
end{call}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{call}{client}{
\backslash
small ServiceSearchRequest(UUID) + CS 
\backslash
((1)
\backslash
)}{server}{
\backslash
small ServiceSearchResponse 
\backslash
((2/N)
\backslash
) + CS 
\backslash
((2)
\backslash
)}
\backslash
end{call}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{call}{client}{
\backslash
dots}{server}{
\backslash
dots}
\backslash
end{call}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{call}{client}{
\backslash
small ServiceSearchRequest(UUID) + CS 
\backslash
((i)
\backslash
)}{server}{
\backslash
small ServiceSearchResponse 
\backslash
((i/N)
\backslash
) + CS 
\backslash
((i)
\backslash
)}
\backslash
end{call}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{call}{client}{
\backslash
dots}{server}{
\backslash
dots}
\backslash
end{call}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{call}{client}{
\backslash
small ServiceSearchRequest(UUID) + CS 
\backslash
((N)
\backslash
)}{server}{
\backslash
small ServiceSearchResponse 
\backslash
((N/N)
\backslash
)}
\backslash
end{call}
\end_layout

\begin_layout Plain Layout


\backslash
end{sequencediagram}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:sdp-continuation-state-workflow"

\end_inset


\size footnotesize
Workflow di una comunicazione SDP con 
\emph on
continuation state 
\emph default
per la ricerca di un servizio
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Bluetooth Network Encapsulation Protocol
\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand nocite
key "blueborne_white_paper"

\end_inset


\end_layout

\begin_layout Standard
Il servizio 
\begin_inset Flex CT - acronym
status collapsed

\begin_layout Plain Layout

BNEP
\end_layout

\end_inset

 realizza l'incapsulamento di pacchetti Ethernet su una connessione L2CAP.
 L'utilizzo che se ne fa è quello di permettere il 
\emph on
tethering
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Condivisione della connessione internet di un dispositivo con altri dispositivi
\end_layout

\end_inset

 tramite Bluetooth.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
colorbitbox}[3]{%
\end_layout

\begin_layout Plain Layout

	
\backslash
rlap{
\backslash
bitbox{#2}{
\backslash
color{#1}
\backslash
rule{
\backslash
width}{
\backslash
height}}}%
\end_layout

\begin_layout Plain Layout

	
\backslash
bitbox{#2}{#3}}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
fakeEthernetPacketFormatting}[1]{%
\end_layout

\begin_layout Plain Layout

	
\backslash
tiny
\end_layout

\begin_layout Plain Layout

	
\backslash
ifnum#1=1234567890
\end_layout

\begin_layout Plain Layout

		#1
\end_layout

\begin_layout Plain Layout

	
\backslash
else
\end_layout

\begin_layout Plain Layout

		
\backslash
ifnum#1=2
\end_layout

\begin_layout Plain Layout

			
\backslash
(6
\backslash
) Byte%
\end_layout

\begin_layout Plain Layout

		
\backslash
else
\end_layout

\begin_layout Plain Layout

			
\backslash
ifnum#1=8
\end_layout

\begin_layout Plain Layout

				
\backslash
(6
\backslash
) Byte%
\end_layout

\begin_layout Plain Layout

			
\backslash
else
\end_layout

\begin_layout Plain Layout

				
\backslash
ifnum#1=13
\end_layout

\begin_layout Plain Layout

					
\backslash
(2
\backslash
) Byte%
\end_layout

\begin_layout Plain Layout

				
\backslash
else
\end_layout

\begin_layout Plain Layout

					
\backslash
ifnum#1=20
\end_layout

\begin_layout Plain Layout

						
\backslash
(0-1500
\backslash
) Byte%
\end_layout

\begin_layout Plain Layout

					
\backslash
else
\end_layout

\begin_layout Plain Layout

						
\backslash
ifnum#1=29
\end_layout

\begin_layout Plain Layout

							
\backslash
(4
\backslash
) Byte%
\end_layout

\begin_layout Plain Layout

						
\backslash
fi
\end_layout

\begin_layout Plain Layout

					
\backslash
fi
\end_layout

\begin_layout Plain Layout

				
\backslash
fi
\end_layout

\begin_layout Plain Layout

			
\backslash
fi
\end_layout

\begin_layout Plain Layout

		
\backslash
fi
\end_layout

\begin_layout Plain Layout

	
\backslash
fi
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{bytefield}[%
\end_layout

\begin_layout Plain Layout

	boxformatting={
\backslash
centering
\backslash
itshape},
\end_layout

\begin_layout Plain Layout

	bitformatting=
\backslash
fakeEthernetPacketFormatting,
\end_layout

\begin_layout Plain Layout

	bitwidth=1em]{32}
\end_layout

\begin_layout Plain Layout

	
\backslash
bitheader{0-31} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{6}{
\backslash
scriptsize Indirizzo di destinazione} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{6}{
\backslash
scriptsize Indirizzo sorgente} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{2}{
\backslash
scriptsize Ether Type} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{green!15}{14}{Payload Ethernet} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{red!15}{4}{
\backslash
scriptsize Checksum CRC} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{bytefield}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

~
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{bytefield}[%
\end_layout

\begin_layout Plain Layout

	boxformatting={
\backslash
centering
\backslash
itshape},
\end_layout

\begin_layout Plain Layout

	bitwidth=1em]{32}
\end_layout

\begin_layout Plain Layout

	
\backslash
bitheader[endianness=little]{0,6,7,8,23,24,31} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
bitbox{32}{Header L2CAP} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{7}{
\backslash
scriptsize BNEP Type = 
\backslash
(0x00
\backslash
)} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{1}{
\backslash
small E} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{24}{
\backslash
scriptsize Indirizzo di destinazione 
\backslash

\backslash
 
\backslash
tiny (Byte 
\backslash
(0-2
\backslash
))} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{24}{
\backslash
scriptsize Indirizzo di destinazione 
\backslash

\backslash
 
\backslash
tiny (Byte 
\backslash
(3-5
\backslash
))} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{8}{
\backslash
scriptsize Indirizzo sorgente 
\backslash

\backslash
 
\backslash
tiny (Byte 
\backslash
(0
\backslash
))} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{32}{
\backslash
scriptsize Indirizzo sorgente 
\backslash

\backslash
 
\backslash
tiny (Byte 
\backslash
(1-4
\backslash
))} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{8}{
\backslash
scriptsize Indirizzo sorgente 
\backslash

\backslash
 
\backslash
tiny (Byte 
\backslash
(5
\backslash
))} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{16}{
\backslash
scriptsize Tipo di protocollo di rete} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{green!15}{8}{
\backslash
scriptsize Payload Ethernet 
\backslash

\backslash
 
\backslash
tiny (
\backslash
(0-1500
\backslash
) Byte)} &
\end_layout

\begin_layout Plain Layout


\backslash
end{bytefield}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:bnep-packet-encapsulation"

\end_inset


\size footnotesize
Meccanismo di incapsulamento di un pacchetto Ethernet con BNEP
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:bnep-packet-encapsulation"

\end_inset

 mostra come avviene la trasformazione tra gli header Ethernet e BNEP.
 
\end_layout

\begin_layout Standard
Oltre all'incapsulamento, BNEP supporta diverse altre tipologie di pacchetto
 tra cui i cosìdetti 
\emph on
BNEP Control Messages
\emph default
, messaggi utilizzati per scambiare informazioni di controllo.
\end_layout

\begin_layout Standard
Il formato di un messaggio di controllo BNEP è mostrato di seguito; come
 si può notare l'intero messaggio è contenuto nell'header BNEP e nessun
 payload viene inviato.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
colorbitbox}[3]{%
\end_layout

\begin_layout Plain Layout

	
\backslash
rlap{
\backslash
bitbox{#2}{
\backslash
color{#1}
\backslash
rule{
\backslash
width}{
\backslash
height}}}%
\end_layout

\begin_layout Plain Layout

	
\backslash
bitbox{#2}{#3}}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{bytefield}[%
\end_layout

\begin_layout Plain Layout

	boxformatting={
\backslash
centering
\backslash
itshape},
\end_layout

\begin_layout Plain Layout

	bitwidth=1em]{32}
\end_layout

\begin_layout Plain Layout

	
\backslash
bitheader[endianness=little]{0,6,7,8,15,16,31} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
bitbox{32}{Header L2CAP} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{7}{
\backslash
scriptsize BNEP Type = 
\backslash
(0x01
\backslash
)} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{1}{
\backslash
small E} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{8}{
\backslash
scriptsize BNEP Control Type} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{16}{
\backslash
scriptsize Pacchetto di controllo basato sul Control Type} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{bytefield}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:bnep-control-message-format"

\end_inset


\size footnotesize
Formato del messaggio di controllo BNEP
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Per permettere l'invio di più messaggi di controllo in un singolo messaggio
 L2CAP è possibile accodare uno o più 
\emph on
extension header 
\emph default
(vedi Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:bnep-extension-header-format"

\end_inset

) all'header BNEP di Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:bnep-control-message-format"

\end_inset

.
 Per segnalare che a seguire è presente un 
\emph on
extension header
\emph default
 da leggere si pone il bit E (
\emph on
Extension
\emph default
) al valore 
\begin_inset Formula $1$
\end_inset

 (
\begin_inset Formula $0x1$
\end_inset

).
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
colorbitbox}[3]{%
\end_layout

\begin_layout Plain Layout

	
\backslash
rlap{
\backslash
bitbox{#2}{
\backslash
color{#1}
\backslash
rule{
\backslash
width}{
\backslash
height}}}%
\end_layout

\begin_layout Plain Layout

	
\backslash
bitbox{#2}{#3}}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{bytefield}[%
\end_layout

\begin_layout Plain Layout

	boxformatting={
\backslash
centering
\backslash
itshape},
\end_layout

\begin_layout Plain Layout

	bitwidth=1em]{32}
\end_layout

\begin_layout Plain Layout

	
\backslash
bitheader[endianness=little]{0,6,7,8,15,16,31} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
wordbox{1}{Header L2CAP} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{orange!15}{32}{
\backslash
small Header BNEP 
\backslash

\backslash
 
\backslash
tiny (con bit 
\backslash
(E=0x1
\backslash
))} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{7}{
\backslash
scriptsize Extension Type} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{1}{
\backslash
tiny E 
\backslash

\backslash
 
\backslash
tiny 
\backslash
(0x1
\backslash
)} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{8}{
\backslash
scriptsize Extension Length} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{16}{
\backslash
scriptsize Extension Payload} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
wordbox[]{1}{$
\backslash
vdots$} 
\backslash

\backslash
[1ex]
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{7}{
\backslash
scriptsize Extension Type} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{1}{
\backslash
tiny E 
\backslash

\backslash
 
\backslash
tiny 
\backslash
(0x1
\backslash
)} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{8}{
\backslash
scriptsize Extension Length} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{16}{
\backslash
scriptsize Extension Payload} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{7}{
\backslash
scriptsize Extension Type} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{1}{
\backslash
tiny E 
\backslash

\backslash
 
\backslash
tiny 
\backslash
(0x0
\backslash
)} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{8}{
\backslash
scriptsize Extension Length} &
\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{blue!15}{16}{
\backslash
scriptsize Extension Payload} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
colorbitbox{green!15}{32}{
\backslash
scriptsize Payload
\backslash

\backslash
 
\backslash
tiny (
\backslash
(0-1500
\backslash
) Byte)} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
end{bytefield}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:bnep-extension-header-format"

\end_inset


\size footnotesize
Formato dell'
\emph on
extension header
\emph default
 BNEP
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
endgroup
\end_layout

\end_inset


\end_layout

\end_body
\end_document
